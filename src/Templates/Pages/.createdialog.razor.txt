@using EvermoonSuite.Application.Features.{nameofPlural}.DTOs
@using EvermoonSuite.Application.Features.{nameofPlural}.Service;
@using EvermoonSuite.Application.Features.{nameofPlural}.Validator;

@inherits MudComponentBase
@inject IStringLocalizer<{nameofPlural}> L
@inject I{itemname}Service _service

<MudDialog>
    <DialogContent>
        <MudForm Model="@model" @ref="@_form" Validation="@(_modelValidator.ValidateValue)">
            <MudGrid>
                {mudFormFieldDefinition}
            </MudGrid>
            <MudStack Row="true" Class="mt-6 mb-3" Spacing="2" Justify="Justify.FlexEnd">
                <MudButton Size="Size.Small" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Cancel" OnClick="Cancel">@ConstantString.Cancel</MudButton>
                <MudLoadingButton Loading="@_savingnew" Size="Size.Small" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary" OnClick="SaveAndNew">@ConstantString.SaveAndNew</MudLoadingButton>
                <MudLoadingButton Loading="@_saving" Size="Size.Small" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary" OnClick="Submit">@ConstantString.Save</MudLoadingButton>
            </MudStack>
        </MudForm>
    </DialogContent>   
</MudDialog>

@code {
    MudForm? _form;
    private bool _saving = false;
    private bool _savingnew = false;
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;
    {itemname}Validator _modelValidator = new ();
    [Parameter][EditorRequired]
    public {itemname}Dto model { get; set; } = default!;
    
    async Task Submit()
    {
        try
        {
            _saving = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;
            var result = await _service.Create(model);
            if (result.Succeeded)
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, MudBlazor.Severity.Error);
            }
        }
        finally
        {
            _saving = false;
        }
    }
    async Task SaveAndNew()
    {
        try
        {
            _savingnew = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
               return;
            var result = await _service.Create(model);
            if (result.Succeeded)
            {
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                await Task.Delay(300);
                model = new {itemname}Dto() { };
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, MudBlazor.Severity.Error);
            }
        }
        finally
        {
            _savingnew = false;
        }
    }
    void Cancel() => MudDialog.Cancel();
}