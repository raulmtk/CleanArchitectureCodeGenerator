@page "/pages/{nameofPluralLowerCase}"

@using BlazorDownloadFile
@using EvermoonSuite.Application.Features.{nameofPlural}.DTOs
@using EvermoonSuite.Application.Features.{nameofPlural}.Service;

@inject IJSRuntime JS
@inject IStringLocalizer<{nameofPlural}> L
@inject I{itemname}Service _service
@attribute [Authorize(Policy = Permissions.{nameofPlural}.View)]
<PageTitle>@Title</PageTitle>

<ErrorBoundary>
    <ChildContent>
        <MudContainer MaxWidth="MaxWidth.False">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudIcon Icon="fa-solid fa-expand" Size="Size.Medium" Color="Color.Primary" />
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.button" Color="Color.Primary">@L[Title!]</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <ToolBar TEntity="{itemname}Dto" @bind-Properties="Properties" CanCreate="@_canCreate" CanExport="@_canExport" CanImport="@_canImport"
                                 OnCreate="@(OnCreate)" OnImportData="@(OnImportData)" OnRefresh="@(OnRefresh)" OnExport="@(OnExport)"
                                 OnToggledAdvancedFilters="@(OnToggledAdvancedFilters)" OnToggleShowInactives="@(OnToggleShowInactives)" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    @if (_toggleAdvancedFilter)
                    {
                        <AdvancedFilters TEntity="{itemname}" OnSearch="@(OnSearch)"/>
                    }         
                    <MudDataGrid ServerData="@(ServerReload)"
                              FixedHeader="true"
                              FixedFooter="true"
                              Virtualize="true"
                              Dense="true"
                              Striped="true"
                              @bind-RowsPerPage="_defaultPageSize"
                              Height="calc(100vh - 260px)"
                              Loading="@_loading"
                              MultiSelection="true"
                              @bind-SelectedItems="_selectedItems"
                              @bind-SelectedItem="_currentDto"
                              Hover="true" @ref="_table"
                              RowClass="py-0"
                              RowStyleFunc="@(RowStyleFunc)">
                        <Columns>
                            @{
                                Type elementType = typeof({itemname}Dto);
                                ParameterExpression prm = Expression.Parameter(elementType, "obj");
                                foreach (var key in Properties.Keys)
                                {
                                    var property = Expression.Property(prm, key);
                                    var type = key.PropertyType.ToString();
                                    switch (type)
                                    {
                                        case "System.String":
                                            {
                                                Expression<Func<{itemname}Dto, string?>> lambda = Expression.Lambda<Func<{itemname}Dto, string?>>(property, prm);
                                                <PropertyColumn Hidden="@(!Properties[key])" Property="@lambda" Title="@L[_currentDto.GetMemberDescription(lambda)]" />
                                                break;
                                            }
                                        case "System.Int32":
                                            {
                                                Expression<Func<{itemname}Dto, int>> lambda = Expression.Lambda<Func<{itemname}Dto, int>>(property, prm);
                                                <PropertyColumn Hidden="@(!Properties[key])" Property="@lambda" Title="@L[_currentDto.GetMemberDescription(lambda)]" />
                                                break;
                                            }
                                        case "System.Boolean":
                                            {
                                                Expression<Func<{itemname}Dto, bool>> lambda = Expression.Lambda<Func<{itemname}Dto, bool>>(property, prm);
                                                <PropertyColumn Hidden="@(!Properties[key])" Property="@lambda" Title="@L[_currentDto.GetMemberDescription(lambda)]" />
                                                break;
                                            }
                                    }
                                }
                            }
                            <TemplateColumn Title="Actions" ShowColumnOptions="false" ShowFilterIcon="false" Sortable="false">
                                <CellTemplate>
                                    <MudStack Row="true" Spacing="1">
                                        <MudIconButton Icon="@Icons.Material.Outlined.RemoveRedEye"
                                                       Size="Size.Small"
                                                       Title="Details"
                                                       Color="Color.Surface"
                                                       OnClick="@(() => OnDetail(context.Item))" />
                                        @if (_canCreate && context.Item.IsActive)
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.CopyAll"
                                                           Size="Size.Small"
                                                           Title="Clone"
                                                           Color="Color.Surface"
                                                           OnClick="@(() => OnClone(context.Item))" />
                                        }
                                        @if (_canEdit && context.Item.IsActive)
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                                           Size="Size.Small"
                                                           Title="Edit"
                                                           Color="Color.Surface"
                                                           OnClick="@(() => OnEdit(context.Item))" />
                                        }
                                        @if (_canEdit && !context.Item.IsActive)
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.Restore"
                                                           Size="Size.Small"
                                                           Title="Restore"
                                                           Color="Color.Surface"
                                                           OnClick="@(() => OnRestore(context.Item))" />
                                            <MudIconButton Icon="@Icons.Material.Filled.DeleteForever"
                                                           Size="Size.Small"
                                                           Title="Delete Permanently"
                                                           Color="Color.Error"
                                                           OnClick="@(() => OnDelete(context.Item))" />
                                        }
                                    </MudStack>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                        <NoRecordsContent>
                            <MudText>@ConstantString.NoRecords</MudText>
                        </NoRecordsContent>
                        <LoadingContent>
                            <MudText>@ConstantString.Loading</MudText>
                        </LoadingContent>
                        <PagerContent>
                            <MudDataGridPager PageSizeOptions="@(new int[]{10,15,30,50,100,500,1000})" />
                        </PagerContent>
                    </MudDataGrid>
                </MudCardContent>
            </MudCard>
        </MudContainer>
    </ChildContent>
    <ErrorContent>
        <CustomError Exception="context"></CustomError>
    </ErrorContent>
</ErrorBoundary>


@code {
    public string? Title { get; private set; }
    private int _defaultPageSize = 15;
    private HashSet<{itemname}Dto> _selectedItems = new HashSet<{itemname}Dto>();
    private MudDataGrid<{itemname}Dto> _table = default!;
    private {itemname}Dto _currentDto = new();
    private bool _loading;
    private bool _uploading;
    private bool _downloading;
    private bool _exporting;
    private bool _showInactives;
    private bool _toggleAdvancedFilter;
    private IDictionary<PropertyInfo, bool> Properties = new Dictionary<PropertyInfo, bool>();
    private Type elementType = typeof({itemname}Dto);
    
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;

    private EntityDataQuery<{itemname}> Query { get; set; } = new();
    [Inject]
    private IBlazorDownloadFileService BlazorDownloadFileService { get; set; } = null!;
    private bool _canSearch;
    private bool _canCreate;
    private bool _canEdit;
    private bool _canDelete;
    private bool _canImport;
    private bool _canExport;

    protected override async Task OnInitializedAsync()
    {
        Title = L[_currentDto.GetClassDescription()];
        var state = await AuthState;
        _canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.{nameofPlural}.Create)).Succeeded;
        _canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.{nameofPlural}.Search)).Succeeded;
        _canEdit   = (await AuthService.AuthorizeAsync(state.User, Permissions.{nameofPlural}.Edit)).Succeeded;
        _canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.{nameofPlural}.Delete)).Succeeded;
        _canImport = (await AuthService.AuthorizeAsync(state.User, Permissions.{nameofPlural}.Import)).Succeeded;
        _canExport = (await AuthService.AuthorizeAsync(state.User, Permissions.{nameofPlural}.Export)).Succeeded;
    }
    private Func<{itemname}Dto, int, string> RowStyleFunc => (x, i) =>
    {
        if (!x.IsActive)
            return "background-color:#eeb7b7ff";
        return "";
    };
    private async Task<GridData<{itemname}Dto>> ServerReload(GridState<{itemname}Dto> state)
    {
        try
        {
            _loading = true;
            Query.SortProperty = state.SortDefinitions.FirstOrDefault()?.SortBy ?? "Code";
            Query.SortOrder = (!state.SortDefinitions.Any() ? Sorting.Ascending : (state.SortDefinitions.FirstOrDefault()?.Descending ?? true ? Sorting.Descending : Sorting.Ascending));
            Query.PageNumber = state.Page + 1;
            Query.PageSize = state.PageSize;
            var result = await _service.Get{nameofPlural}WithPagination(Query).ConfigureAwait(false);
            return new GridData<{itemname}Dto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            _loading = false;
        }

    }
    private async Task OnToggleShowInactives()
    {
        if (!Query.ShowInactives)
            Query.ShowInactives = true;
        else
            Query.ShowInactives = false;
        await _table.ReloadServerData();
    }
    private async Task OnToggledAdvancedFilters()
    {
        if (_toggleAdvancedFilter)
        {
            _toggleAdvancedFilter = false;
            Query.Filters = null;
            await _table.ReloadServerData();
        }
        else
            _toggleAdvancedFilter = true;
    }
    private async Task OnSearch(Expression<Func<{itemname}, bool>> filters)
    {
        _selectedItems = new();
        Query.Filters = filters;
        await _table.ReloadServerData();
    }   
    private async Task OnRefresh()
    {
        _selectedItems = new();
        await _table.ReloadServerData();
    }
    private async Task OnDetail({itemname}Dto obj)
    {
        var parameters = new DialogParameters()
        {
            { nameof(_{itemname}DetailDialog.model), obj },
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<_{itemname}DetailDialog>
        (L[$"{L[obj.GetClassName()]} ({obj.Code})"], parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            await _table.ReloadServerData();
        }
    }
    private async Task OnCreate()
    {
        var obj = new {itemname}Dto();
        var parameters = new DialogParameters()
        {
            { nameof(_{itemname}CreateDialog.model), obj },
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<_{itemname}CreateDialog>
        (L[$"New {L[obj.GetClassName()]}"], parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            await _table.ReloadServerData();
        }
    }
    private async Task OnClone({itemname}Dto obj)
    {
        Type sourceType = typeof({itemname}Dto);
        ParameterExpression source = Expression.Parameter(sourceType);
        var createModel = Expression.New(typeof({itemname}Dto));
        var bindings = new List<MemberAssignment>();
        foreach (var prop in sourceType.GetProperties().Where(x => x.GetCustomAttribute<ClonableAttribute>() != null))
        {
            var v1 = Expression.Call(source, prop.GetGetMethod()!);
            var destinationProperty = typeof({itemname}Dto).GetProperty(prop.Name);
            bindings.Add(Expression.Bind(destinationProperty!, v1));
        }
        var init = Expression.MemberInit(createModel, bindings);
        var lambdaExpression = Expression.Lambda<Func<{itemname}Dto, {itemname}Dto>>(init, source);
        var copy = lambdaExpression.Compile()(obj);
        var parameters = new DialogParameters()
        {
            { nameof(_{itemname}CreateDialog.model), copy },
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<_{itemname}CreateDialog>
        (L[$"New {L[obj.GetClassName()]}"], parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            await _table.ReloadServerData();
        }
    }
    private async Task OnEdit({itemname}Dto obj)
    {
        var parameters = new DialogParameters()
        {
            { nameof(_{itemname}EditDialog.model), obj },
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<_{itemname}EditDialog>
        (L[$"Edit {L[obj.GetClassName()]} ({obj.Code})"], parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            await _table.ReloadServerData();
        }
    }
    private async Task OnRestore({itemname}Dto obj)
    {
        var result = await _service.ChangeActiveStatus(obj, true);
        if (result.Succeeded)
        {
            Snackbar.Add(L[ConstantString.RestoreSuccess], MudBlazor.Severity.Info);
            await _table.ReloadServerData();
        }
    }
    private async Task OnDelete({itemname}Dto obj)
    {
        var parameters = new DialogParameters
           {
             { nameof(DeleteConfirmation.ContentText), string.Format(ConstantString.DeleteConfirmation) }
           };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = false, DisableBackdropClick = true };
        var dialog = DialogService.Show<DeleteConfirmation>(ConstantString.DeleteConfirmationTitle, parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            await _service.ChangeActiveStatus(obj, false);
            await _table.ReloadServerData();
        }

    }
    private async Task OnExport(OutputExportFormat format)
    {
        if (_exporting)
            return;

        _exporting = true;
        var result = await _service.ExportAsync(Query);
        if (result.Succeeded)
        {
            var downloadresult = await BlazorDownloadFileService.DownloadFile($"{L["{nameofPlural}"]}.{L[format.GetDescription()]}", result.Data, contentType: "application/octet-stream");
            Snackbar.Add($"{ConstantString.ExportSuccess}", MudBlazor.Severity.Info);
        }
        else
        {
            Snackbar.Add($"{result.ErrorMessage}", MudBlazor.Severity.Error);
        }
        _exporting = false;

    }
    private async Task OnImportData(byte[] data)
    {
        var result = await _service.ImportFromExcel(data);
        if (result.Succeeded)
        {
            Snackbar.Add($"{ConstantString.BackgroungJobCreated}", MudBlazor.Severity.Info);
        }
        else
        {
            foreach (var msg in result.Errors)
            {
                Snackbar.Add($"{msg}", MudBlazor.Severity.Error);
            }
        }
    }
}