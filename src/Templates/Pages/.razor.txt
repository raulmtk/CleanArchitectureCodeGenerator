@page "/pages/{nameofPluralLowerCase}"

@using BlazorDownloadFile
@using EvermoonSuite.Application.Features.{nameofPlural}.DTOs
@using EvermoonSuite.Application.Features.{nameofPlural}.Service;

@inject IJSRuntime JS
@inject IStringLocalizer<{nameofPlural}> L
@inject I{itemname}Service _service
@attribute [Authorize(Policy = Permissions.{nameofPlural}.View)]
<PageTitle>@Title</PageTitle>

<ErrorBoundary>
    <ChildContent>
        <MudContainer MaxWidth="MaxWidth.False">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudIcon Icon="fa-solid fa-expand" Size="Size.Medium" Color="Color.Primary" />
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.button" Color="Color.Primary">@L[Title!]</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudStack Row="true" Spacing="1" Justify="@Justify.FlexEnd">
                            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                                <MudTooltip Text="@L[ConstantString.Refresh]" Color="Color.Default" Placement="Placement.Bottom" Arrow="true">
                                    <MudIconButton DisableElevation Variant="Variant.Text"
                                                   Size="Size.Medium"
                                                   Icon="@Icons.Material.Filled.Refresh"
                                                   OnClick="@(OnRefresh)"
                                                   Color="@Color.Primary"
                                                   Title="@L[ConstantString.Refresh]"
                                                   aria-label="refresh">
                                    </MudIconButton>
                                </MudTooltip>
                                <MudTooltip Text="@L[ConstantString.ToggleAdvancedFilters]" Color="Color.Default" Placement="Placement.Bottom" Arrow="true">
                                    <MudIconButton DisableElevation Variant="Variant.Text"
                                                   Size="Size.Medium"
                                                   OnClick="@(OnToggledAdvancedFilters)"
                                                   Icon="@(_toggleAdvancedFilter ? Icons.Material.Filled.FilterAltOff : Icons.Material.Filled.FilterAlt)"
                                                   Color="@Color.Primary"
                                                   aria-label="filters">
                                    </MudIconButton>
                                </MudTooltip>
                                @if (_canCreate)
                                {
                                    <MudTooltip Text="@L[ConstantString.New]" Color="Color.Default" Placement="Placement.Bottom" Arrow="true">
                                        <MudIconButton DisableElevation Variant="Variant.Text"
                                                       Size="Size.Medium"
                                                       Icon="@Icons.Material.Filled.Add"
                                                       OnClick="@(OnCreate)"
                                                       Color="@Color.Primary"
                                                       Title="@L[ConstantString.New]"
                                                       aria-label="new">
                                        </MudIconButton>
                                    </MudTooltip>
                                    <MudTooltip Text="@L[ConstantString.Clone]" Color="Color.Default" Placement="Placement.Bottom" Arrow="true">
                                        <MudIconButton DisableElevation Variant="Variant.Text"
                                                       Size="Size.Medium"
                                                       Disabled="@(_selectedItems.Count!=1)"
                                                       OnClick="@(OnClone)"
                                                       Icon="@Icons.Material.Filled.CopyAll"
                                                       Color="@Color.Primary"
                                                       Title="@L[ConstantString.Clone]"
                                                       aria-label="clone">
                                        </MudIconButton>
                                    </MudTooltip>
                                }                                
                                @if (_canExport)
                                {
                                    <MudTooltip Text="@L[ConstantString.Export]" Color="Color.Default" Placement="Placement.Bottom" Arrow="true">
                                        <MudMenu Dense="true" Icon="@Icons.Material.Filled.Download" Color="Color.Primary" Disabled="@_downloading"
                                                 AnchorOrigin="@Origin.BottomRight" TransformOrigin="@Origin.TopRight">
                                            <MudMenuItem IconSize="Size.Small" IconColor="Color.Primary" Icon="fa-solid fa-file-pdf">@L[ConstantString.ExportPDF]</MudMenuItem>
                                            <MudMenuItem IconSize="Size.Small" IconColor="Color.Primary" Icon="fa-solid fa-file-csv">Export to CSV</MudMenuItem>
                                            <MudMenuItem IconSize="Size.Small" IconColor="Color.Primary" Icon="fa-solid fa-file-excel">Export to Excel</MudMenuItem>
                                        </MudMenu>
                                    </MudTooltip>
                                }
                                @if (_canImport)
                                {
                                    <MudTooltip Text="@L[ConstantString.ImportExcel]" Color="Color.Default" Placement="Placement.Bottom" Arrow="true">
                                        <MudFileUpload T="IBrowserFile" FilesChanged="OnImportData" Accept=".xlsx" Style="margin-top:0px">
                                            <ButtonTemplate>
                                                <MudIconButton HtmlTag="label"
                                                               Size="Size.Medium"
                                                               Variant="Variant.Text"
                                                               Color="Color.Primary"
                                                               Disabled="@_loading"
                                                               Icon="@(_uploading ? "fa-solid fa-spinner fa-spin" : Icons.Material.Filled.Upload)"
                                                               for="@context">
                                                </MudIconButton>
                                            </ButtonTemplate>
                                        </MudFileUpload>
                                    </MudTooltip>
                                }
                                <MudTooltip Text="@L[ConstantString.Settings]" Color="Color.Default" Placement="Placement.Bottom" Arrow="true">
                                    <MudMenu Dense="true" Icon="@Icons.Material.Filled.DisplaySettings" Color="Color.Primary" Disabled="@_loading"
                                             AnchorOrigin="@Origin.BottomRight" TransformOrigin="@Origin.TopRight">
                                        <MudMenuItem>
                                            <MudSwitch Size="@Size.Small" @bind-Checked="@_showInactives" Color="Color.Primary"
                                                       Label="@(_showInactives ? L[ConstantString.HideInactives] : L[ConstantString.ShowInactives])" />
                                        </MudMenuItem>
                                    </MudMenu>
                                </MudTooltip>
                            </MudHidden>
                            <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                                <MudTooltip Text="@L[ConstantString.Refresh]" Color="Color.Default" Placement="Placement.Bottom" Arrow="true">
                                    <MudIconButton DisableElevation Variant="Variant.Text"
                                                   Size="Size.Medium"
                                                   Icon="@Icons.Material.Filled.Refresh"
                                                   OnClick="@(OnRefresh)"
                                                   Color="@Color.Primary"
                                                   Title="@L[ConstantString.Refresh]"
                                                   aria-label="refresh">
                                    </MudIconButton>
                                </MudTooltip>
                                <MudTooltip Text="@L[ConstantString.ToggleAdvancedFilters]" Color="Color.Default" Placement="Placement.Bottom" Arrow="true">
                                    <MudIconButton DisableElevation Variant="Variant.Text"
                                                   Size="Size.Medium"
                                                   OnClick="@(OnToggledAdvancedFilters)"
                                                   Icon="@(_toggleAdvancedFilter ? Icons.Material.Filled.FilterAltOff : Icons.Material.Filled.FilterAlt)"
                                                   Color="@Color.Primary"
                                                   aria-label="filters">
                                    </MudIconButton>
                                </MudTooltip>
                                @if (_canImport)
                                {
                                    <MudTooltip Text="@L[ConstantString.ImportExcel]" Color="Color.Default" Placement="Placement.Bottom" Arrow="true">
                                        <MudFileUpload T="IBrowserFile" FilesChanged="OnImportData" Accept=".xlsx" Style="margin-top:0px">
                                            <ButtonTemplate>
                                                <MudIconButton HtmlTag="label"
                                                               Size="Size.Medium"
                                                               Variant="Variant.Text"
                                                               Color="Color.Primary"
                                                               Disabled="@_loading"
                                                               Icon="@(_uploading ? "fa-solid fa-spinner fa-spin" : Icons.Material.Filled.Upload)"
                                                               for="@context">
                                                </MudIconButton>
                                            </ButtonTemplate>
                                        </MudFileUpload>
                                    </MudTooltip>
                                }
                                @if (_canExport)
                                {
                                    <MudTooltip Text="@L[ConstantString.Export]" Color="Color.Default" Placement="Placement.Bottom" Arrow="true">
                                        <MudMenu Dense="true" Icon="@Icons.Material.Filled.Download" Color="Color.Primary" Disabled="@_downloading"
                                                 AnchorOrigin="@Origin.BottomRight" TransformOrigin="@Origin.TopRight">
                                            <MudMenuItem IconSize="Size.Small" IconColor="Color.Primary" Icon="fa-solid fa-file-pdf">@L[ConstantString.ExportPDF]</MudMenuItem>
                                            <MudMenuItem IconSize="Size.Small" IconColor="Color.Primary" Icon="fa-solid fa-file-csv">Export to CSV</MudMenuItem>
                                            <MudMenuItem IconSize="Size.Small" IconColor="Color.Primary" Icon="fa-solid fa-file-excel">Export to Excel</MudMenuItem>
                                        </MudMenu>
                                    </MudTooltip>
                                }
                                <MudTooltip Text="@L[ConstantString.Menu]" Color="Color.Default" Placement="Placement.Bottom" Arrow="true">
                                    <MudMenu Dense="true" Icon="@Icons.Material.Filled.Dehaze" Color="Color.Primary" Disabled="@_downloading"
                                             AnchorOrigin="@Origin.BottomRight" TransformOrigin="@Origin.TopRight">
                                        @if (_canCreate)
                                        {
                                            <MudMenuItem IconSize="Size.Small" IconColor="Color.Primary"
                                                         Icon="@Icons.Material.Filled.Add"
                                                         OnClick="@(OnCreate)">
                                                @L[ConstantString.New]
                                            </MudMenuItem>
                                            <MudMenuItem IconSize="Size.Small" IconColor="Color.Primary"
                                                         Icon="@Icons.Material.Filled.CopyAll"
                                                         OnClick="@(OnClone)"
                                                         Disabled="@(_selectedItems.Count!=1)">
                                                @L[ConstantString.Clone]
                                            </MudMenuItem>
                                        }                                        

                                        <MudMenuItem>
                                            <MudSwitch Size="@Size.Small" @bind-Checked="@_showInactives" Color="Color.Primary"
                                                       Label="@(_showInactives ? L[ConstantString.HideInactives] : L[ConstantString.ShowInactives])" />
                                        </MudMenuItem>
                                    </MudMenu>
                                </MudTooltip>
                            </MudHidden>
                        </MudStack>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    @if (_toggleAdvancedFilter)
                    {
                        <AdvancedFilters TEntity="{itemname}" OnSearch="@(OnSearch)"/>
                    }         
                    <MudDataGrid ServerData="@(ServerReload)"
                              FixedHeader="true"
                              FixedFooter="true"
                              Virtualize="true"
                              Dense="true"
                              Striped="true"
                              @bind-RowsPerPage="_defaultPageSize"
                              Height="calc(100vh - 230px)"
                              Loading="@_loading"
                              MultiSelection="true"
                              @bind-SelectedItems="_selectedItems"
                              @bind-SelectedItem="_currentDto"
                              Hover="true" @ref="_table">
                        
                        <Columns>
                            <SelectColumn ShowInFooter="false"></SelectColumn>
                            <PropertyColumn Property="x => x.{keyname}" Title="@L[_currentDto.GetMemberDescription(x=>x.{keyname})]">
                                <CellTemplate>
                                    <MudLink OnClick="@(() => OnDetail(context.Item))">@context.Item.{keyname}</MudLink>
                                </CellTemplate>
                            </PropertyColumn>
                            @*TODO: Define the fields that should be displayed in data table*@
                            {mudTdHeaderDefinition}
                            <TemplateColumn Title="Actions">
                                <CellTemplate>
                                    <MudStack Row="true" Spacing="1">
                                        <MudIconButton Icon="@Icons.Material.Filled.CopyAll"
                                                       Size="Size.Small"
                                                       Title="Clone"
                                                       Color="Color.Primary"
                                                       OnClick="@(() => OnClone(context.Item))" />
                                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                                       Size="Size.Small"
                                                       Title="Edit"
                                                       Color="Color.Warning"
                                                       OnClick="@(() => OnEdit(context.Item))" />
                                        <MudIconButton Icon="@Icons.Material.Filled.DeleteForever"
                                                       Size="Size.Small"
                                                       Title="Delete"
                                                       Color="Color.Error"
                                                       OnClick="@(() => OnDelete(context.Item))" />
                                    </MudStack>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                        <NoRecordsContent>
                            <MudText>@ConstantString.NoRecords</MudText>
                        </NoRecordsContent>
                        <LoadingContent>
                            <MudText>@ConstantString.Loading</MudText>
                        </LoadingContent>
                        <PagerContent>
                            <MudDataGridPager PageSizeOptions="@(new int[]{10,15,30,50,100,500,1000})" />
                        </PagerContent>
                    </MudDataGrid>
                </MudCardContent>
            </MudCard>
        </MudContainer>
    </ChildContent>
    <ErrorContent>
        <CustomError Exception="context"></CustomError>
    </ErrorContent>
</ErrorBoundary>


@code {
    public string? Title { get; private set; }
    private int _defaultPageSize = 15;
    private HashSet<{itemname}Dto> _selectedItems = new HashSet<{itemname}Dto>();
    private MudDataGrid<{itemname}Dto> _table = default!;
    private {itemname}Dto _currentDto = new();
    private bool _loading;
    private bool _uploading;
    private bool _downloading;
    private bool _exporting;
    private bool _showInactives;
    private bool _toggleAdvancedFilter;
    
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;

    private EntityDataQuery<{itemname}> Query { get; set; } = new();
    [Inject]
    private IBlazorDownloadFileService BlazorDownloadFileService { get; set; } = null!;
    private bool _canSearch;
    private bool _canCreate;
    private bool _canEdit;
    private bool _canDelete;
    private bool _canImport;
    private bool _canExport;

    protected override async Task OnInitializedAsync()
    {
        Title = L[_currentDto.GetClassDescription()];
        var state = await AuthState;
        _canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.{nameofPlural}.Create)).Succeeded;
        _canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.{nameofPlural}.Search)).Succeeded;
        _canEdit   = (await AuthService.AuthorizeAsync(state.User, Permissions.{nameofPlural}.Edit)).Succeeded;
        _canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.{nameofPlural}.Delete)).Succeeded;
        _canImport = (await AuthService.AuthorizeAsync(state.User, Permissions.{nameofPlural}.Import)).Succeeded;
        _canExport = (await AuthService.AuthorizeAsync(state.User, Permissions.{nameofPlural}.Export)).Succeeded;
    }
    private async Task<GridData<{itemname}Dto>> ServerReload(GridState<{itemname}Dto> state)
    {
        try
        {
            _loading = true;
            Query.SortProperty = state.SortDefinitions.FirstOrDefault()?.SortBy ?? "{keyname}";
            Query.SortOrder = (state.SortDefinitions.FirstOrDefault()?.Descending ?? true ? AutoFilterer.Enums.Sorting.Descending : AutoFilterer.Enums.Sorting.Ascending);
            Query.PageNumber = state.Page + 1;
            Query.PageSize = state.PageSize;
            var result = await _service.Get{nameofPlural}WithPagination(Query).ConfigureAwait(false);
            return new GridData<{itemname}Dto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            _loading = false;
        }

    }
    private async Task OnToggledAdvancedFilters()
    {
        if (_toggleAdvancedFilter)
        {
            _toggleAdvancedFilter = false;
            Query.Filters = null;
            await _table.ReloadServerData();
        }
        else
            _toggleAdvancedFilter = true;
    }
    private async Task OnSearch(Expression<Func<{itemname}, bool>> filters)
    {
        _selectedItems = new();
        Query.Filters = filters;
        await _table.ReloadServerData();
    }
   
    private async Task OnRefresh()
    {
        _selectedItems = new();
        await _table.ReloadServerData();
    }

    private async Task OnDetail({itemname}Dto dto)
    {
        Snackbar.Add("Function not implemented", MudBlazor.Severity.Error);
    }

    private async Task OnCreate()
    {
        var obj = new {itemname}Dto();
        var parameters = new DialogParameters()
        {
            { nameof(_{itemname}CreateDialog.model), obj },
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<_{itemname}CreateDialog>
        (L["New {itemname}"], parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            await _table.ReloadServerData();
        }
    }

    private async Task OnClone({itemname}Dto obj)
    {
        var copy = new {itemname}Dto()
        {
           /*define all clonable field*/
        };
        var parameters = new DialogParameters()
        {
            { nameof(_{itemname}CreateDialog.model), copy },
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<_{itemname}CreateDialog>
        (L["New {itemname}"], parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            await _table.ReloadServerData();
        }
    }

    private async Task OnEdit({itemname}Dto obj)
    {
        var parameters = new DialogParameters()
        {
            { nameof(_{itemname}EditDialog.model), obj },
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<_{itemname}EditDialog>
        (L[$"Edit Item"], parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            await _table.ReloadServerData();
        }
    }

    private async Task OnDelete({itemname}Dto obj)
    {
        var parameters = new DialogParameters
           {
             { nameof(DeleteConfirmation.ContentText), string.Format(ConstantString.DeleteConfirmation) }
           };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<DeleteConfirmation>(ConstantString.DeleteConfirmationTitle, parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            await _service.ChangeActiveStatus(obj, false);
            await _table.ReloadServerData();
        }

    }

    private async Task OnExport()
    {
        Snackbar.Add("Function not implemented", MudBlazor.Severity.Error);
        /*
        _exporting = true;
        var request = new Export{nameofPlural}Query()
            {
                Keyword = Query.Keyword,
                ListView = Query.ListView,
                Sort = _table.SortDefinitions.Values.FirstOrDefault()?.SortBy ?? "{keyname}",
                SortBy = (_table.SortDefinitions.Values.FirstOrDefault()?.Descending ?? false) ? AutoFilterer.Enums.Sorting.Ascending : AutoFilterer.Enums.Sorting.Descending
            };
        var result = await Mediator.Send(request);
        if (result.Succeeded)
        {
            var downloadresult = await BlazorDownloadFileService.DownloadFile($"{L["{nameofPlural}"]}.xlsx", result.Data, contentType:"application/octet-stream");
            Snackbar.Add($"{ConstantString.ExportSuccess}", MudBlazor.Severity.Info);
        }
        else
        {
            Snackbar.Add($"{result.ErrorMessage}", MudBlazor.Severity.Error);
        }
        _exporting = false;
        */
    }

    private async Task OnImportData(IBrowserFile file)
    {
        Snackbar.Add("Function not implemented", MudBlazor.Severity.Error);
       /*
        _uploading = true;
        var stream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(stream);
        var command = new Import{nameofPlural}Command(file.Name, stream.ToArray());
        var result = await Mediator.Send(command);
        if (result.Succeeded)
        {
            await _table.ReloadServerData();
            Snackbar.Add($"{ConstantString.ImportSuccess}", MudBlazor.Severity.Info);
        }
        else
        {
            foreach (var msg in result.Errors)
            {
                Snackbar.Add($"{msg}", MudBlazor.Severity.Error);
            }
        }
        _uploading = false;
        */
    }

}